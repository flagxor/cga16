( RANDOM NUMBER GENERATOR )
VARIABLE SEED1 VARIABLE SEED2  1 SEED1 !  1 SEED2 !
: LSHIFT ( N N -- N ) FOR 2* NEXT ;
: RSHIFT ( N N -- N ) FOR 2/ NEXT ;
: NEXT-RANDOM   SEED1 @ 7 LSHIFT SEED1 @ XOR SEED1 !
                SEED1 @ 8 RSHIFT SEED1 @ XOR SEED1 !
                SEED1 @ 9 LSHIFT SEED1 @ XOR SEED1 !
                SEED1 @ SEED2 +!
                SEED2 @ 7 LSHIFT SEED2 @ XOR SEED2 !
                SEED2 @ 8 RSHIFT SEED2 @ XOR SEED2 !
                SEED2 @ 9 LSHIFT SEED2 @ XOR SEED2 ! ;
: RANDOM16 ( -- N ) SEED2 @ NEXT-RANDOM ;
: RANDOM ( N -- N ) RANDOM16 SWAP UMOD ;

( UTILITY )
: 3DROP ( N N N -- ) 2DROP DROP ;

( BIOS GRAPHICS )
CODE INT10 ( A B C D -- )
  BX DX MOV,
  CX POP,
  BX POP,
  AX POP,
  $10 #, INT,
  BX POP,
  NXT,
END-CODE

: SCREEN   0 0 0 INT10 ;
: HOME   $0200 0 0 0 INT10 ;


( CGA RAW HANDLING )
: CGA-REG! ( n rn -- ) $3D4 PC! $3D5 PC! ;
: CGA-MODE! ( n -- ) $3D8 PC! ;
: CGA-COLOR! ( n -- ) $3D9 PC! ;
: CGA-CHARLINES! ( n -- ) 1- 9 CGA-REG! ;
: CGA-ROWS! ( n -- ) 6 CGA-REG! ;

$B800 CONSTANT DISPLAY
: DISPC@ ( A -- N ) DISPLAY SWAP LC@ ;
: DISPC! ( N A -- ) DISPLAY SWAP LC! ;

: GRF16-MODE   2 SCREEN 2 CGA-CHARLINES! 9 CGA-MODE! 100 CGA-ROWS! ;
: TEXT-MODE   2 SCREEN 8 CGA-CHARLINES! 25 CGA-ROWS! ;


( BLOADING )
VARIABLE LOADING
: >DISP ( A A )
   1024 FOR
     OVER OVER I + SWAP I + C@ SWAP
     DISPLAY SWAP LC!
   NEXT 2DROP ;
: BLOAD ( str -- ) FOPEN DROP LOADING !
    HERE 7 LOADING @ FILE-READ
    0 16 FOR HERE 1024 LOADING @ FILE-READ
             HERE OVER >DISP 1024 + NEXT DROP
    LOADING @ FCLOSE ;


( GENERIC GRAPHICS )
VARIABLE WIDTH   VARIABLE HEIGHT
VARIABLE PATTERN
DEFER PLOT
: ROW ( X Y W -- ) OVER 0< PUSH OVER HEIGHT @ 1- > POP OR IF 3DROP EXIT THEN
                   SWAP PUSH OVER + WIDTH @ 1- MIN PUSH 0 MAX POP OVER - POP SWAP
                   DUP 0< IF 3DROP EXIT THEN
                   FOR 2DUP PLOT SWAP 1+ SWAP NEXT 2DROP ;
: BOX ( X Y W H -- ) FOR 3DUP ROW SWAP 1+ SWAP NEXT 2DROP DROP ;


( MODE 160x100 )
: PLOT1P ( X Y -- A ) 160 * SWAP $FFFE AND + 1+ DUP DISPC@ ;
: PLOT1AA ( X Y -- ) PLOT1P $F0 AND PATTERN C@ $0F AND OR SWAP DISPC! ;
: PLOT1BA ( X Y -- ) PLOT1P $0F AND PATTERN C@ $F0 AND OR SWAP DISPC! ;
: PLOT1AB ( X Y -- ) PLOT1P $F0 AND PATTERN 1+ C@ $0F AND OR SWAP DISPC! ;
: PLOT1BB ( X Y -- ) PLOT1P $0F AND PATTERN 1+ C@ $F0 AND OR SWAP DISPC! ;
CREATE PLOT1-OPS ' PLOT1AA , ' PLOT1BA , ' PLOT1AB , ' PLOT1BB ,
: PLOT1 ( X Y -- ) OVER 1 AND OVER 1 AND 2* + 2* PLOT1-OPS + @ EXECUTE ;
: 160x100   GRF16-MODE
            8000 FOR 221 DISPLAY I 2* L! NEXT
            ['] PLOT1 IS PLOT
            160 WIDTH ! 100 HEIGHT ! ;

( MODE 320x200 )
: PLOT2A ( X Y -- ) 2/ 80 *
                    PUSH DUP 3 AND SWAP 2 RSHIFT POP +
                    SWAP 3 SWAP 3 XOR 2* LSHIFT
                    OVER DISPC@ OVER $FFFF XOR AND SWAP PATTERN C@ AND OR
                    SWAP DISPC! ;
: PLOT2B ( X Y -- ) 2/ 80 * $2000 +
                    PUSH DUP 3 AND SWAP 2 RSHIFT POP +
                    SWAP 3 SWAP 3 XOR 2* LSHIFT
                    OVER DISPC@ OVER $FFFF XOR AND SWAP PATTERN 1+ C@ AND OR
                    SWAP DISPC! ;
: PLOT2 ( X Y -- ) DUP 1 AND IF PLOT2B ELSE PLOT2A THEN ;
: 320x200   5 SCREEN
            8000 FOR 0 DISPLAY I 2* L! NEXT
            ['] PLOT2 IS PLOT
            320 WIDTH ! 200 HEIGHT ! ;

( MODE 640x200 )
: PLOT3A ( X Y -- ) 2/ 80 *
                    PUSH DUP 7 AND SWAP 3 RSHIFT POP +
                    SWAP 1 SWAP 7 XOR LSHIFT
                    OVER DISPC@ OVER $FFFF XOR AND SWAP PATTERN C@ AND OR
                    SWAP DISPC! ;
: PLOT3B ( X Y -- ) 2/ 80 * $2000 +
                    PUSH DUP 7 AND SWAP 3 RSHIFT POP +
                    SWAP 1 SWAP 7 XOR LSHIFT
                    OVER DISPC@ OVER $FFFF XOR AND SWAP PATTERN 1+ C@ AND OR
                    SWAP DISPC! ;
: PLOT3 ( X Y -- ) DUP 1 AND IF PLOT3B ELSE PLOT3A THEN ;
: 640x200   6 SCREEN
            8000 FOR 0 DISPLAY I 2* L! NEXT
            ['] PLOT3 IS PLOT
            640 WIDTH ! 200 HEIGHT ! ;

( MOUSE DRIVER )

CODE MOUSE-PRESENT? ( -- buttons present )
  BX PUSH,
  $0000 #, AX MOV,
  $33 #, INT,
  BX PUSH,
  AX BX MOV,
  NXT,
END-CODE

CODE MOUSE-SHOW
  $0001 #, AX MOV,
  $33 #, INT,
  NXT,
END-CODE

CODE MOUSE-HIDE
  $0002 #, AX MOV,
  $33 #, INT,
  NXT,
END-CODE

CODE MOUSE-QUERY ( -- X Y buttons )
  BX PUSH,
  $0003 #, AX MOV,
  $33 #, INT,
  CX PUSH,
  DX PUSH,
  NXT,
END-CODE

CODE MOUSE-MOVE ( X Y -- )
  $0004 #, AX MOV,
  BX DX MOV,
  CX POP,
  $33 #, INT,
  BX POP,
  NXT,
END-CODE

CODE MOUSE-XRANGE ( min max -- )
  $0007 #, AX MOV,
  BX DX MOV,
  CX POP,
  $33 #, INT,
  BX POP,
  NXT,
END-CODE

CODE MOUSE-YRANGE ( min max -- )
  $0008 #, AX MOV,
  BX DX MOV,
  CX POP,
  $33 #, INT,
  BX POP,
  NXT,
END-CODE

CODE MOUSE-SHAPE ( A HX HY -- )
  $0009 #, AX MOV,
  BX CX MOV,
  BX POP,
  DX POP,
  CS PUSH,
  ES POP,
  $33 #, INT,
  BX POP,
  NXT,
END-CODE


( BIOS CHARSET )

$000E CONSTANT LOCHAR-ADDR
$FFA6 CONSTANT LOCHAR-SEG
$0000 $007C L@ CONSTANT HICHAR-ADDR
$0000 $007E L@ CONSTANT HICHAR-SEG
: BIOSCH ( N -- N )
   DUP 128 < IF
     8 * LOCHAR-ADDR + LOCHAR-SEG
   ELSE
     128 - 8 * HICHAR-ADDR + HICHAR-SEG
   THEN
   SWAP
;

: POPCNT ( N -- N )
   0 16 FOR OVER 0< IF 1+ THEN SWAP 2* SWAP NEXT NIP ;

: BIOSCH4 ( N -- N )
   BIOSCH L@ 0 4 FOR
     OVER $0F I 4 * LSHIFT AND POPCNT
     DUP 2 < OVER 2 > OR 0= IF DROP 2DROP -1 POP DROP EXIT THEN
     2 > NEGATE I LSHIFT +
   NEXT
   NIP ;

CREATE NIB2CHAR
  0 C,   0 C,   133 C, 0 C,   160 C, 0 C,   31 C,  1 C,
  149 C, 0 C,   221 C, 0 C,   238 C, 0 C,   162 C, 1 C,
  162 C, 0 C,   238 C, 1 C,   221 C, 1 C,   149 C, 1 C,
  31 C,  0 C,   160 C, 1 C,   133 C, 1 C,   0 C,   1 C,
: >CH ( N -- N ) 2* NIB2CHAR + @ ;

CREATE CHAR2NIB   256 ALLOT   CHAR2NIB 256 0 FILL
: MAKE-CHAR2NIB
   16 FOR
     I >CH $100 < IF
       I I >CH CHAR2NIB + C!
     THEN
   NEXT
;
MAKE-CHAR2NIB
: >NIB ( N -- N ) CHAR2NIB + C@ ;

: NIBSWAP ( N -- N ) DUP 4 LSHIFT $F0 AND SWAP 4 RSHIFT $F AND OR ;

( MODE 160x200 )
: PLOT4A ( A NIB -- )
   >CH DUP $100 AND IF PUSH DUP 1+ DISPC@ NIBSWAP OVER 1+ DISPC! POP THEN
   SWAP DISPC! ;
: PLOT4F ( A N -- ) PUSH DUP DISPC@ >NIB POP OR PLOT4A ;
: PLOT4B ( A N -- ) PUSH DUP DISPC@ >NIB POP $F XOR AND PLOT4A ;
: PLOT4P ( X Y B -- )
   PUSH 2/ 160 * SWAP $FFFE AND +
   DUP 1+ DISPC@ $F AND PATTERN C@ = IF
     POP PLOT4F EXIT
   THEN
   DUP 1+ DISPC@ $F0 AND 4 RSHIFT PATTERN C@ = IF
     POP PLOT4B EXIT
   THEN
   DUP DISPC@ >NIB POPCNT 2 > IF
     DUP 1+ DISPC@ $F AND PATTERN @ 4 LSHIFT OR OVER 1+ DISPC!
     POP PLOT4B
   ELSE
     DUP 1+ DISPC@ $F0 AND PATTERN @ OR OVER 1+ DISPC!
     POP PLOT4F
   THEN
;
: PLOT4 ( X Y -- ) OVER 1 AND OVER 1 AND 2* + 1 SWAP LSHIFT PLOT4P ;
: 160x200   GRF16-MODE
            8000 FOR $F000 DISPLAY I 2* L! NEXT
            ['] PLOT4 IS PLOT
            160 WIDTH ! 200 HEIGHT ! ;


( GRAPHICS TESTS )

: TEST1
  GRF16-MODE
  8000 FOR I I * DISPLAY I 2* L! NEXT
  KEY TEXT-MODE CLS
;

: TEST2
  GRF16-MODE
  " LOOM2RA.DAT" BLOAD
  KEY TEXT-MODE CLS
;

: TEST3
  160x100
  BEGIN KEY? 0= WHILE
    RANDOM16 PATTERN !
    140 RANDOM 80 RANDOM 20 20 BOX
  REPEAT KEY
  320x200
  BEGIN KEY? 0= WHILE
    RANDOM16 PATTERN !
    300 RANDOM 180 RANDOM 20 20 BOX
  REPEAT KEY
  640x200
  BEGIN KEY? 0= WHILE
    RANDOM16 PATTERN !
    600 RANDOM 180 RANDOM 40 20 BOX
  REPEAT KEY
  160x200
  BEGIN KEY? 0= WHILE
    16 RANDOM PATTERN !
    140 RANDOM 180 RANDOM 20 20 BOX
  REPEAT KEY
  TEXT-MODE CLS
;

: TEST3A
  160x200
  0 PATTERN !
  100 FOR
    I 0 PLOT
    0 I PLOT
    I I PLOT
    I I I * 100 / PLOT
  NEXT
  KEY
  TEXT-MODE CLS
;

: TEST3B
  160x200
  BEGIN KEY? 0= WHILE
    16 RANDOM PATTERN !
    160 RANDOM 200 RANDOM PLOT
  REPEAT KEY
  TEXT-MODE CLS
;

: TEST4
  320x200
  $FFFF PATTERN !
  200 FOR
    0 I PLOT
    I 0 PLOT
    I I PLOT
    I I I 200 */ PLOT
  NEXT
  KEY
  TEXT-MODE CLS
;

: TEST5
  160x100
  MOUSE-PRESENT? DROP DROP
  0 800 MOUSE-YRANGE
  MOUSE-SHOW
  RANDOM16 PATTERN !
  BEGIN KEY? 0= WHILE
    MOUSE-QUERY IF
      MOUSE-HIDE
      2/ 2/ 2/ 2 - SWAP 2/ 2/ 2 - SWAP 4 4 BOX
      MOUSE-SHOW
    ELSE
      2DROP
    THEN
  REPEAT KEY
  TEXT-MODE CLS
;

: TEST5A
  160x200
  MOUSE-PRESENT? DROP DROP
  0 800 MOUSE-YRANGE
  MOUSE-SHOW
  BEGIN KEY? 0= WHILE
    MOUSE-QUERY IF
      MOUSE-HIDE
      2/ 2/ SWAP 1- 2/ 2/ SWAP 1- 3 3 BOX
      MOUSE-SHOW
    ELSE
      16 RANDOM PATTERN !
      2DROP
    THEN
  REPEAT KEY
  TEXT-MODE CLS
;

: TEST5B
  160x200
  MOUSE-PRESENT? DROP DROP
  0 800 MOUSE-YRANGE
  MOUSE-SHOW
  BEGIN KEY? 0= WHILE
    MOUSE-QUERY IF
      MOUSE-HIDE
      2/ 2/ SWAP 2/ 2/ SWAP PLOT
      MOUSE-SHOW
    ELSE
      16 RANDOM PATTERN !
      2DROP
    THEN
  REPEAT KEY
  TEXT-MODE CLS
;

: TEST5C
  160x100
  MOUSE-PRESENT? DROP DROP
  0 800 MOUSE-YRANGE
  MOUSE-SHOW
  BEGIN KEY? 0= WHILE
    MOUSE-QUERY IF
      MOUSE-HIDE
      2/ 2/ 2/ SWAP 2/ 2/ SWAP PLOT
      MOUSE-SHOW
    ELSE
      16 RANDOM DUP 4 LSHIFT OVER 8 LSHIFT OR OVER 12 LSHIFT OR OR PATTERN !
      2DROP
    THEN
  REPEAT KEY
  TEXT-MODE CLS
;

: TEST6
  640x200
  256 FOR
    I BIOSCH LC@ I 64 U/MOD 80 * 8 * + DISPLAY SWAP LC!
    I BIOSCH 1+ L@ I 64 U/MOD 80 * 8 * + $2000 + DISPLAY SWAP LC!
  NEXT
  KEY
  256 FOR
    I BIOSCH 2 + LC@ I 64 U/MOD 80 * 8 * + 80 + DISPLAY SWAP LC!
    I BIOSCH 3 + L@ I 64 U/MOD 80 * 8 * + 80 + $2000 + DISPLAY SWAP LC!
    I BIOSCH 4 + LC@ I 64 U/MOD 80 * 8 * + 160 + DISPLAY SWAP LC!
    I BIOSCH 5 + L@ I 64 U/MOD 80 * 8 * + 160 + $2000 + DISPLAY SWAP LC!
    I BIOSCH 6 + LC@ I 64 U/MOD 80 * 8 * + 240 + DISPLAY SWAP LC!
    I BIOSCH 7 + L@ I 64 U/MOD 80 * 8 * + 240 + $2000 + DISPLAY SWAP LC!
  NEXT
  KEY
  TEXT-MODE
;

: TEST7
  0 256 FOR
    DUP BIOSCH4 0 > IF
      DUP . DUP BIOSCH4 . SPACE SPACE
    THEN
  1+ NEXT DROP
;

: TEST8
  CLS GRF16-MODE
  500 FOR
    NIB2CHAR 16 RANDOM 2* + C@ I 2* DISPLAY SWAP LC!
    256 RANDOM DISPLAY I 2* 1+ LC!
  NEXT
  KEY TEXT-MODE CLS
;
